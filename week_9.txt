#include <string>
#include <iostream>
using namespace std;

string search(string& values, string param) {
	string tt;
	for (int i = values.find(param) + param.size() + 1;i <= values.size();i++) {
		if (values[i] == ',') break;
		tt += values[i];
	}
	return tt;
}

int main()
{
	a:string values;
	getline(std::cin, values);
	string temp;
	getline(std::cin, temp);
	int start, end, t;
	string arg,insrt;


go:for (int k = 0; k <= temp.size();k++){
	if (temp[k] == '[')
	{
		arg.clear();
		start = k;
		for (int i = k + 1; i <= temp.size();i++){
			k = i;
			end = i;
			if (temp[k] == ']') break;
			arg += temp[i];
		}

		if ((values.find(arg) != string::npos)) {
			temp.erase(start, end - start + 1);
			temp.insert(start, search(values, arg));goto go;
		}
	}
}
cout << temp << "\n";
return 0;
}


//task 2
#include <string>
#include <iostream>
#include <regex>
using namespace std;


int main() {
	string password;
	getline(cin, password);

	bool size=0, upLetter=0, letter=0, sym=0, dgt=0 ,valid;

	if (regex_search(password, regex("[a-z]"))) letter = true;
	if (regex_search(password, regex("[A-Z]"))) upLetter = true;
	if (regex_search(password, regex("\\d")))	dgt = true;
	if (regex_search(password, regex("[^a-zA-Z0-9]"))) sym = true;
	if (password.length() >= 8 ) size = true;
	
	valid = size * upLetter * letter * sym * dgt;
	if (valid) cout << "password valid";
	else {
		if(!size)		cout << "The password must be 8 characters long" << endl;
		if(!upLetter)	cout << "The password must have at least one upper case letter" << endl;
		if(!letter)		cout << "The password must have at least one lower case letter" << endl;
		if(!sym)	cout << "The password must have at least one special character" << endl;
		if(!dgt)	cout << "The password must have at least one digit" << endl;
	}
}
